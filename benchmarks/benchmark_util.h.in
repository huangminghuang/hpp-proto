#include <chrono>
#include <fstream>
#include <iostream>
#include <vector>

inline void benchmark(auto &&fun, int repetitions, const char *description) {
  auto start = std::chrono::steady_clock::now();
  for (int i = 0; i < repetitions; ++i) {
    if (!fun()) {
      std::cerr << "Error for " << description << "\n";
      throw std::runtime_error{description};
    }
  }
  std::cout << "The time for " << description << " is " << (std::chrono::steady_clock::now() - start).count()
            << " ns\n";
}


inline std::vector<char> read_data_file(std::string filename) {
  std::filebuf buf;
  if (buf.open(filename, std::ios::binary | std::ios::in) == nullptr) {
    std::cerr << "Open file " << filename << " for read failed\n";
    throw std::system_error {std::make_error_code(std::errc::no_such_file_or_directory) };
  }

  return {std::istreambuf_iterator<char>{&buf}, std::istreambuf_iterator<char>{}};
}

const std::string data_dir = "@CMAKE_CURRENT_SOURCE_DIR@";