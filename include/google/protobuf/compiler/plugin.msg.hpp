// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// generation command line:
//    protoc
//    --plugin=protoc-gen-hpp=/home/huangming/opensource/hpp-proto/out/build/clang-18/protoc-plugin/protoc-gen-hpp
//    --hpp_out
//    proto2_explicit_presence=.google.protobuf.FieldDescriptorProto.oneof_index,proto2_explicit_presence=.google.protobuf.FieldOptions.packed:${out_dir}
//    google/protobuf/compiler/plugin.proto

#pragma once

#include "google/protobuf/descriptor.msg.hpp"
#include <hpp_proto/field_types.hpp>

namespace google::protobuf::compiler {
// NOLINTBEGIN(readability-redundant-member-init,performance-enum-size)

struct Version {
  int32_t major = {};
  int32_t minor = {};
  int32_t patch = {};
  std::string suffix = {};

  bool operator==(const Version &) const = default;
};

struct CodeGeneratorResponse {
  enum class Feature { FEATURE_NONE = 0, FEATURE_PROTO3_OPTIONAL = 1 };

  struct File {
    std::string name = {};
    std::string insertion_point = {};
    std::string content = {};

    bool operator==(const File &) const = default;
  };

  std::string error = {};
  uint64_t supported_features = {};
  std::vector<File> file;

  bool operator==(const CodeGeneratorResponse &) const = default;
};

struct CodeGeneratorRequest {
  std::vector<std::string> file_to_generate;
  std::string parameter = {};
  std::vector<FileDescriptorProto> proto_file;
  std::optional<Version> compiler_version;

  bool operator==(const CodeGeneratorRequest &) const = default;
};

constexpr auto message_type_url(const Version &) {
  return hpp::proto::string_literal<"type.googleapis.com/google.protobuf.compiler.Version">{};
}
constexpr auto message_type_url(const CodeGeneratorResponse::File &) {
  return hpp::proto::string_literal<"type.googleapis.com/google.protobuf.compiler.CodeGeneratorResponse.File">{};
}
constexpr auto message_type_url(const CodeGeneratorResponse &) {
  return hpp::proto::string_literal<"type.googleapis.com/google.protobuf.compiler.CodeGeneratorResponse">{};
}
constexpr auto message_type_url(const CodeGeneratorRequest &) {
  return hpp::proto::string_literal<"type.googleapis.com/google.protobuf.compiler.CodeGeneratorRequest">{};
}
// NOLINTEND(readability-redundant-member-init,performance-enum-size)
} // namespace google::protobuf::compiler
