// clang-format off
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// generation command line:
//    protoc --plugin=protoc-gen-hpp=/path/to/protoc-gen-hpp
//           --hpp_out proto2_explicit_presence=.google.protobuf.FieldDescriptorProto.oneof_index,proto2_explicit_presence=.google.protobuf.FieldOptions.packed:${out_dir}
//           google/protobuf/compiler/plugin.proto

#pragma once

#include <hpp_proto/field_types.hpp>
#include "google/protobuf/descriptor.msg.hpp"

namespace google::protobuf::compiler {
//NOLINTBEGIN(performance-enum-size)

struct Version {
  std::int32_t major = {};
  std::int32_t minor = {};
  std::int32_t patch = {};
  std::string suffix;

  bool operator == (const Version&) const = default;
};

struct CodeGeneratorResponse {
  enum class Feature {
    FEATURE_NONE = 0,
    FEATURE_PROTO3_OPTIONAL = 1,
    FEATURE_SUPPORTS_EDITIONS = 2 
  };

  struct File {
    std::string name;
    std::string insertion_point;
    std::string content;
    std::optional<GeneratedCodeInfo> generated_code_info;

    bool operator == (const File&) const = default;
  };

  std::string error;
  std::uint64_t supported_features = {};
  std::int32_t minimum_edition = {};
  std::int32_t maximum_edition = {};
  std::vector<File> file;

  bool operator == (const CodeGeneratorResponse&) const = default;
};

struct CodeGeneratorRequest {
  std::vector<std::string> file_to_generate;
  std::string parameter;
  std::vector<FileDescriptorProto> proto_file;
  std::vector<FileDescriptorProto> source_file_descriptors;
  std::optional<Version> compiler_version;

  bool operator == (const CodeGeneratorRequest&) const = default;
};

constexpr auto message_type_url(const Version&) { return hpp::proto::string_literal<"type.googleapis.com/google.protobuf.compiler.Version">{}; }

constexpr bool is_valid(CodeGeneratorResponse::Feature value){
  int v = static_cast<int>(value);
  return v >= 0 && v <= 2;
}

constexpr auto message_type_url(const CodeGeneratorResponse::File&) { return hpp::proto::string_literal<"type.googleapis.com/google.protobuf.compiler.CodeGeneratorResponse.File">{}; }
constexpr auto message_type_url(const CodeGeneratorResponse&) { return hpp::proto::string_literal<"type.googleapis.com/google.protobuf.compiler.CodeGeneratorResponse">{}; }
constexpr auto message_type_url(const CodeGeneratorRequest&) { return hpp::proto::string_literal<"type.googleapis.com/google.protobuf.compiler.CodeGeneratorRequest">{}; }
// NOLINTEND(performance-enum-size)
} // namespace google::protobuf::compiler
// clang-format on
