// clang-format off
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// generation command line:
//    protoc --plugin=protoc-gen-hpp=/path/to/protoc-gen-hpp
//           --hpp_out :${out_dir}
//           hpp_proto/hpp_options.proto

#pragma once

#include <hpp_proto/field_types.hpp>
#include "google/protobuf/descriptor.msg.hpp"
// @@protoc_insertion_point(includes)


namespace hpp::proto {
//NOLINTBEGIN(performance-enum-size)

struct FileOptions {
  hpp::proto::optional<bool> non_owning;
  hpp::proto::optional<std::string> namespace_prefix;
  hpp::proto::optional<std::string> string_keyed_map;
  hpp::proto::optional<std::string> numeric_keyed_map;

  bool operator == (const FileOptions&) const = default;
};

struct MessageOptions {
  hpp::proto::optional<bool> non_owning;
  hpp::proto::optional<std::string> string_keyed_map;
  hpp::proto::optional<std::string> numeric_keyed_map;

  bool operator == (const MessageOptions&) const = default;
};

struct FieldOptions {
  hpp::proto::optional<bool> non_owning;
  hpp::proto::optional<std::string> string_keyed_map;
  hpp::proto::optional<std::string> numeric_keyed_map;

  bool operator == (const FieldOptions&) const = default;
};

constexpr auto message_type_url(const FileOptions&) { return hpp::proto::string_literal<"type.googleapis.com/hpp.proto.FileOptions">{}; }
constexpr auto message_type_url(const MessageOptions&) { return hpp::proto::string_literal<"type.googleapis.com/hpp.proto.MessageOptions">{}; }
constexpr auto message_type_url(const FieldOptions&) { return hpp::proto::string_literal<"type.googleapis.com/hpp.proto.FieldOptions">{}; }
// NOLINTEND(performance-enum-size)
} // namespace hpp::proto
// clang-format on
